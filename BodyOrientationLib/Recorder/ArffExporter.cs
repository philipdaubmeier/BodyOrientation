using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;
using System.Globalization;

namespace BodyOrientationLib
{
    public class ArffExporter<TData> : IDisposable
    {
        private enum ArffType
        {
            Numeric,
            String,
            Nominal,
            Date
        }

        private class ArffTypeInfo
        {
            public TypeCode ClrTypeCode { get; private set; }
            public ArffType ArffType { get; private set; }
            public PropertyInfo Property { get; private set; }
            public string[] NominalValues { get; private set; }

            public string TypeDefinition
            {
                get
                {
                    switch (this.ArffType)
                    {
                        case ArffType.Numeric: return "NUMERIC";
                        case ArffType.String: return "STRING";
                        case ArffType.Nominal: return "{" + string.Join(",", NominalValues) + "}";
                        case ArffType.Date: return "DATE \"yyyy-MM-dd HH:mm:ss\"";
                        default: return null;
                    }
                }
            }

            public ArffTypeInfo(TypeCode clrTypeCode, ArffType arffType, PropertyInfo property) 
                : this(clrTypeCode, arffType, null, property) { }

            public ArffTypeInfo(TypeCode clrTypeCode, ArffType arffType, string[] nominalValues, PropertyInfo property)
            {
                ClrTypeCode = clrTypeCode;
                ArffType = arffType;
                Property = property;
                NominalValues = nominalValues;
            }
        }

        private TextWriter _writer = null;
        private List<ArffTypeInfo> _arffTypes = null;

        private Dictionary<string, string[]> _nominalvalues = null;

        private CultureInfo NumericDotCulture = CultureInfo.GetCultureInfo("en-US");

        public ArffExporter(string filename) : this(filename, null) { }

        public ArffExporter(string filename, Dictionary<string, string[]> nominalValues)
        {
            _writer = new StreamWriter(filename);

            _writer.WriteLine("% Generated by c# Arff Exporter (c) Philip Daubmeier");
            _writer.WriteLine("@RELATION " + typeof(TData).Name.ToLowerInvariant());
            _writer.WriteLine("");

            _nominalvalues = nominalValues ?? new Dictionary<string, string[]>();

            _arffTypes = new List<ArffTypeInfo>();
            foreach (var property in typeof(TData).GetProperties())
            {
                string name = property.Name.ToLowerInvariant();
                ArffTypeInfo arffType = GetArffType(property);

                if (arffType != null)
                {
                    _arffTypes.Add(arffType);
                    _writer.WriteLine(string.Format("@ATTRIBUTE {0} {1}", name, arffType.TypeDefinition));
                }
            }

            _writer.WriteLine("");
            _writer.WriteLine("@DATA");
            _writer.Flush();
        }

        public void WriteData(TData data)
        {
            _writer.WriteLine(string.Join(",\t", _arffTypes.Select(type => GetStringValue(type, data))));
        }

        /// <summary>
        /// Returns the value of a property of the given object in a Arff compatible way.
        /// </summary>
        private string GetStringValue(ArffTypeInfo type, TData obj)
        {
            object value = type.Property.GetValue(obj, null);

            switch (type.ArffType)
            {
                case ArffType.Numeric:
                    {
                        double numeric = 0;
                        switch (type.ClrTypeCode)
                        {
                            case TypeCode.Byte: numeric = (double)(Byte)value; break;
                            case TypeCode.Decimal: numeric = (double)(Decimal)value; break;
                            case TypeCode.Double: numeric = (double)value; break;
                            case TypeCode.Int16: numeric = (double)(Int16)value; break;
                            case TypeCode.Int32: numeric = (double)(Int32)value; break;
                            case TypeCode.Int64: numeric = (double)(Int64)value; break;
                            case TypeCode.SByte: numeric = (double)(SByte)value; break;
                            case TypeCode.Single: numeric = (double)(Single)value; break;
                            case TypeCode.UInt16: numeric = (double)(UInt16)value; break;
                            case TypeCode.UInt32: numeric = (double)(UInt32)value; break;
                            case TypeCode.UInt64: numeric = (double)(UInt64)value; break;
                            default: return "?";
                        }
                        return numeric.ToString(NumericDotCulture);
                    }
                case ArffType.String:
                    return "'" + value.ToString() + "'";
                case ArffType.Nominal:
                    return value.ToString();
                case ArffType.Date:
                    return "\"" + ((DateTime)value).ToString("yyyy\"-\"MM\"-\"dd HH\":\"mm\":\"ss") + "\"";
            }

            // Questionmark denotes a missing value, this is the fallback
            return "?";
        }

        /// <summary>
        /// Returns the arff type info about the given property, usable for an Arff 
        /// attribute declaration.
        /// </summary>
        private ArffTypeInfo GetArffType(PropertyInfo property)
        {
            Type type = property.PropertyType;
            TypeCode code = Type.GetTypeCode(type);

            switch (code)
            {
                case TypeCode.Byte:
                case TypeCode.Decimal:
                case TypeCode.Double:
                case TypeCode.Int16:
                case TypeCode.Int32:
                case TypeCode.Int64:
                case TypeCode.SByte:
                case TypeCode.Single:
                case TypeCode.UInt16:
                case TypeCode.UInt32:
                case TypeCode.UInt64:
                    return new ArffTypeInfo(code, ArffType.Numeric, property);
                case TypeCode.String:
                case TypeCode.Char:
                    if (!_nominalvalues.ContainsKey(property.Name))
                        return new ArffTypeInfo(TypeCode.String, ArffType.String, property);
                    else
                        return new ArffTypeInfo(TypeCode.String, ArffType.Nominal, _nominalvalues[property.Name], property);
                case TypeCode.DateTime:
                    return new ArffTypeInfo(TypeCode.DateTime, ArffType.Date, property);
                case TypeCode.Object:
                    if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))
                    {
                        TypeCode underlyingTypeCode = Type.GetTypeCode(Nullable.GetUnderlyingType(type));
                        return new ArffTypeInfo(underlyingTypeCode, ArffType.Numeric, property);
                    }
                    break;
            }
            return null;
        }

        public void Close()
        {
            _writer.Close();
        }

        public void Dispose()
        {
            _writer.Dispose();
        }
    }
}
